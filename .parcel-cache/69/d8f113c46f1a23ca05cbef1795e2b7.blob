"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Collision = void 0;

// Types
class Collision {
  isCollindingBrick(ball, brick) {
    if (ball.pos.x < brick.pos.x + brick.width && ball.pos.x + ball.width > brick.pos.x && ball.pos.y < brick.pos.y + brick.height && ball.pos.y + ball.height > brick.pos.y) {
      return true;
    }

    return false;
  } // Check ball collision with bricks


  isCollidingBricks(ball, bricks) {
    let colliding = false;
    bricks.forEach((brick, i) => {
      if (this.isCollidingBrick(ball, brick)) {}
    });
  }

  checkBallCollision(ball, paddle, view) {
    // Check ball collision with paddle
    if (ball.pos.x + ball.width > paddle.pos.x && ball.pos.x < paddle.pos.x + paddle.width && ball.pos.y + ball.height === paddle.pos.y) {
      ball.changeYDirection();
    } // Check ball collision with walls
    // Ball movement X constraints


    if (ball.pos.x > view.canvas.width - ball.width || ball.pos.x < 0) {
      ball.changeXDirection();
    } // Ball movement Y constraints


    if (ball.pos.y < 0) {
      ball.changeYDirection();
    }
  }

}

exports.Collision = Collision;